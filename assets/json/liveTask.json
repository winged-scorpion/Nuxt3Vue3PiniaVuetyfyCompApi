[
  ["Разворачивание вложенных массивов",
    [
      "let test = (arr:any) => {\n  let result = [];\n  let arrSort = arr;\n  while (arrSort.length){\n    const elem = arrSort.pop();\n    if(Array.isArray(elem)){\n      arrSort.push(...elem);\n    }else{\n      result.unshift(elem);\n    }\n  }\n  return result;\n}\nconsole.log(test([1,[[[[[[[0]]]]]]], [2,10, [3, 4], 5], 6,[7,9]]]))",
      "const flatter = (arr:any) => {\n  return arr.flat(Infinity)\n}\nconsole.log(flatter([[1,2,3],[4,[5]]]))"
    ]
  ],
  [
    "Уникальность всех строк и символов в строке",
    ["const isUnique = (str:string) => {\n  return str.split('').length === new Set(str).size;\n}\nconsole.log(isUnique('abcdef'))"]
  ],
  [
    "Удаление всех повторяющихся значений в строке",
    ["const removeDupes = (str: string) => {\n  let result:string = '';\n  new Set(str).forEach((el)=>{\n    result = result + el;\n  })\n  return result;\n}\nconsole.log(removeDupes('abcdefe'))"]
  ],
  [
    "Какая строка встречается чаще всего",
    ["const highestFrequency = (arr:any) => {\n  const sortArr:any = {}\n  let result:any = ''\n  let num:number = 0;\n  arr.forEach((el:string)=>{\n    if(sortArr[el]){\n      ++sortArr[el]\n    }else{\n      sortArr[el] = 1\n    }\n  })\n  for(let item in sortArr){\n    if(sortArr[item] > num){\n      num = sortArr[item];\n      result = item\n    }\n  }\n  return result;\n}\nconsole.log(highestFrequency(['abc','cde','pre','bbb','bbb','abc','bbb','pre','pre','pre','pre']))"]
  ],
  [
    "Напишите функцию flattenObject(obj), которая принимает в качестве аргумента вложенный объект obj и возвращает новый объект, в котором все свойства объекта obj \"разглажены\" (преобразованы в одноуровневую структуру), с использованием точечной нотации для представления иерархии свойств.",
    ["const ObjTest = {\n  a:{\n    b:2,\n    c:{\n      c1:1,\n      c2:2\n    },\n    d:{\n      d1:1,\n      d2:2\n    }\n  },\n  e:1,\n  f:{\n    f2:{\n      f1:3,\n      f2:2\n    }\n  }\n}\nconst flattenObjectTest = (tempObj:any) => {\n  const result = {};\n  const resTest = [{tempObj,prefix:''}]\n  while (resTest.length > 0){\n    const { tempObj, prefix } = resTest.pop();\n    for (let key in tempObj) {\n      const value = tempObj[key];\n      const newKey = prefix + key;\n      if (typeof value === 'object' && value !== null) {\n        resTest.push({ tempObj: value, prefix: newKey + '.' });\n      } else {\n        result[newKey] = value;\n      }\n    }\n  }\n  return result;\n}\nconsole.log(flattenObjectTest(ObjTest))"]
  ],
  [
    "Преобразовать строку в объект, разделяя свойства по точке.",
    ["const splitStringJson = ( val:string ) =>{\n  let valSplit = val.split('.');\n  return valSplit.reduceRight((nextOb:any,prevOb:any) => {\n    return{[prevOb]:nextOb}\n  })\n}\nconsole.log(splitStringJson('one.two.three.four.five'))"]
  ],
  [
    "Удалить дубликаты",
    ["const removeDublicates = (arr) => {\n  const result = {};\n  arr.forEach((item)=>{\n    if(!result[item]){\n      result[item] = item;\n    }\n  })\n  return Object.values(result)\n}\nconsole.log(removeDublicates([1,2,3,5,9,1,2,8]))"]
  ],
  [
    "Развернуть каждое слово в строке",
    ["const turning = (val) => {\n  const result = []\n  let tempArr = val.split(' ');\n  tempArr.forEach((item)=>{\n    let tempVal = item.split('').reverse()\n   result.push(tempVal.join(''))\n  })\n  return result.join(' ')\n}\nconsole.log(turning('Welkom to this'))"]
  ],
  [
    "Множественные Значения (1)(2)(3)(4)",
    ["function sum(n:number){\n  return function (a:number){\n    return sum(a + n)\n  }\n}\nconsole.log(sum(1)(2)(3)(3)(3)(3)(3)(3))"]
  ],
  [
    "Напишите функцию для сортировки символов в строке по их частоте встречаемости",
    ["const findUniqueElement = (str) => {\n  let tempArr = {}\n  str.split('').forEach((num)=>{\n    if(tempArr[num]){\n      tempArr[num]++\n    }else{\n      tempArr[num] = 1;\n    }\n  })\n  return Object.keys(tempArr).sort((a,b)=> {\n    return tempArr[b] - tempArr[a]\n  }).join('');\n}\nconst arrayExample = 'входных данных и вочастоте';\nconsole.log(findUniqueElement(arrayExample));"]
  ],
  [
    "Дано некоторое число. Проверьте, что цифры этого числа расположены по возрастанию.",
    ["const testWork = (item) => {\n  let tempArr = (''+item).split('');\n  let sortArr = []\n  tempArr.forEach((item)=>{\n    sortArr.push(item * 1)\n  });\n  return sortArr.sort().join('')*1 === item\n}\nconsole.log(testWork(12345679));"]
  ],
  [
    "вывести только чётные числа",
    ["const testWork = (param) => {\n  let result = []\n  for(let start = param[0]; start<=param[1]; start++){\n    if(start % 2 === 0){\n      result.push(start)\n    }\n  }\n  return result\n}\nconsole.log('testWork',testWork([10,50]));"]
  ],
  [
    "Повёрнута ли строка Анаграмма",
    ["const isStringRotated = (str1:string,str2:string) => {\n  if(str1.length !== str2.length){\n    return false;\n  }else{\n    let result:boolean = false;\n    let mapCollection1 = str1.toLowerCase().split('').sort();\n    let mapCollection2 = str2.toLowerCase().split('').sort();\n    for(let i=0;i<=mapCollection1.length;i++){\n      if(mapCollection1[i] === mapCollection2[i]){\n        result = true\n      }else{\n        result = false\n        return false\n      }\n    }\n    return result\n  }\n}\nconsole.log(isStringRotated('javascript','tpIrcsavaj'))"]
  ],
  [
    "Фибоначи",
    ["const fibonacci = (numberStart:number) => {\n  let start:number = 0,\n      next:number = 1,\n      result:any = []\n  for(let i:number = 1;i < numberStart;i++){\n    let nextStep = start+next;\n    start = next\n    next = nextStep\n    result.push(next);\n  }\n  return result;\n}\nconsole.log(fibonacci(10))"]
  ],
  [
    "Необходимо обработать массив таким образом, чтобы распределить людей по группам городов",
    ["const people = [\n  {\n    name: 'Alex',\n    city: 'Moscow',\n  },\n  {\n    name: 'Ivan',\n    city: 'Moscow',\n  },\n  {\n    name: 'Joe',\n    city: 'New York'\n  },\n  {\n    name: 'Johan',\n    city: 'Berlin'\n  },\n]\nconst groupByCity = (array:any) => {\n  const result:any = {};\n  array.forEach((item:any) => {\n    if(!result[item.city]){\n      result[item.city] = [item.name]\n    }else{\n      result[item.city].push(item.name)\n    }\n  })\n  return result;\n}\nconsole.log(groupByCity(people))"]
  ],
  [
    "Объединение интервалов в массиве",
    ["const merge = (intervals:any) => {\n  if(intervals < 2){\n    return intervals;\n  }\n  intervals.sort((a:any,b:any) => a[0] - b[0]);\n  let result = [intervals[0]];\n  for(let interval of intervals){\n    let recent = result[result.length - 1];\n    if(recent[1] >= interval[0]){\n      recent[1] = Math.max(recent[1],interval[1])\n    }else{\n      result.push(interval);\n    }\n  }\n  return result;\n}\nconsole.log(merge([[11, 12], [2, 3], [5, 7], [1, 4], [8, 10], [6, 8]]));"]
  ],
  [
    "Палиндром, с учётом регистра, пробелов и знаков припинания",
    ["const polydrome = (val:string) => {\n  let val0_1 = val\n      .toLowerCase()\n      .replaceAll(' ', '')\n      .replace(/[^\\w\\s]|_/g, \"\")\n      .split('');\n  let val1_0 = val\n      .toLowerCase()\n      .replaceAll(' ', '')\n      .replace(/[^\\w\\s]|_/g, \"\")\n      .split('')\n      .reverse();\n\n  return val0_1.join('') === val1_0.join('');\n\n}\nconsole.log(polydrome('О, духи, от уборки микробу-то и худо'))"]
  ],
  [
    "Очередь с 0(1) сложностью операций",
    ["class Queue {\n  #storage = {}\n  #last = 0;\n  #first = 0;\n\n  enqueue(item){\n    // добавить элемент в конец очереди\n    this.#storage[this.#last] = item;\n    this.#last++;\n  }\n\n  dequeue(){\n    // удалить первый  элемент из очереди\n    if(this.size === 0){\n      return;\n    }\n    const value = this.#storage[this.#first];\n    delete this.#storage[this.#first];\n    this.#first++\n    return value;\n  }\n  print(){\n    console.log(this.#storage)\n  }\n\n  get size(){\n    // возвращает размер списка\n    return this.#last - this.#first\n  }\n}\nconst queue = new Queue();\nqueue.enqueue(1)\nqueue.enqueue(2)\nqueue.enqueue(42)\nqueue.print()\nqueue.dequeue()\nqueue.print()"]
  ],
  [
    "напишите код функций котрая выведет значения переданного ей односвязного списка в обратном порядке (4,3,2,1)",
    [
      "const someList = {\n  value:1,\n  next:{\n    value:2,\n    next:{\n      value:3,\n      next:{\n        value:11,\n        next:{\n          value:19,\n          next:null\n        }\n      }\n    }\n  }\n}\n(function (){\n  const result:any = [];\n  const reversePrint2 = (node:any) => {\n    if(node.next !== null){\n      reversePrint2(node.next)\n    }\n    result.push(node.value);\n  }\n  reversePrint2(someList)\n  console.log('reversePrint2', result)\n})()",
      "const someList = {\n  value:1,\n  next:{\n    value:2,\n    next:{\n      value:3,\n      next:{\n        value:11,\n        next:{\n          value:19,\n          next:null\n        }\n      }\n    }\n  }\n}\nconst reversePrint = (obj:any) => {\n  const result = [];\n  let tempObj:any = obj;\n  let stop = true;\n  while (stop){\n    let [key, value] = Object.entries(tempObj)\n    result.push(key[1])\n    if(value[1].next === null){\n      stop = false\n      result.push(value[1].value)\n    }\n    tempObj = value[1]\n  }\n  return result;\n}"
    ]
  ],
  [
    "функция принимает 2 объекта с разными ключами из которых могут пересекатся. Необходимо вернуть первый объект с обновлёнными значениями из второго объекта(только те которые совпадают)",
    ["const obj1 = {\n  foo: 'foo',\n  bar: 'bar'\n}\nconst obj2 = {\n  bar: 'foo',\n  some: 'some'\n}\nconst res = {\n  foo: 'foo',\n  bar: 'foo'\n}\n\nconst sortObj = (obj1:Object,obj2:Object) => {\n  let result = obj1\n  for(let key in result){\n    for(let value in obj2){\n      if(key === value){\n        result[key] = obj2[value]\n      }\n    }\n  }\n  return result;\n}\nconsole.log(sortObj(obj1,obj2))"]
  ],
  [
    "реализовать функцию которая принимает 2 параметра массив и калбек и вернуть массив где округлённые ключи это названия групп",
    ["let res = {\n  '4': [4.2],\n  '6': [6.1,6.3]\n}\nconst groupBy = (arr:any,callbackFunction:any) => {\n  let result = {}\n  arr.forEach((item:number) => {\n    let key = callbackFunction(item)\n    if(!result[key]){\n      result[key] = [item]\n    }else{\n      result[key].push(item)\n    }\n  })\n  return result;\n\n}\nconsole.log(groupBy([6.1, 4.2, 6.3],Math.floor))"]
  ],
  [
    "Перебор объекта по текстовой ссылке a.r.b.i",
    ["const obj = {\n  a: {\n    d: 1,\n    f: \"data\",\n    r: {\n      b: {\n        i: 90\n      }\n    }\n  },\n  b: {\n    c: {\n      r: 2,\n    },\n  },\n};\nlet getOr = (link:string,base:number,ob:Object) =>{\n  let result = null;\n  let linkArr = link.split('.')\n  let temObj:any = ob\n  for(let item of linkArr){\n    if(temObj[item]){\n      temObj = temObj[item]\n      if(typeof temObj === 'number'){\n        result = temObj\n      }\n    }else{\n      return base;\n    }\n  }\n  return result\n}\nconsole.log(getOr(\"a.r.b.i\", 1000, obj))"]
  ],
  [
    "Напишите функцию на джаваскрипт, которая принимает параметр со строкой и преобразовывает ее в следующий вид:\"Привет Мир\" => \"прИвЕт мИр\"",
    ["const pol = (val:any) => {\n  let result = []\n  let params = [\"а\", \"е\", \"ё\", \"и\", \"о\", \"у\", \"ы\", \"э\", \"ю\", \"я\"];\n  let tempResult = val.split('');\n  function findPar(val:string) {\n    let st = false;\n    params.forEach((item)=> {\n      if(val === item){\n        st = true\n      }\n    })\n    return st\n  }\n   for(let Letter of tempResult){\n     if(findPar(Letter)){\n       result.push(Letter.toUpperCase())\n     }else{\n       result.push(Letter)\n     }\n  }\n  return result.join('');\n}\nconsole.log(pol('Это относительно'))"]
  ]
]