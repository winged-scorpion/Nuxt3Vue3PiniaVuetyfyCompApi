[
  {
    "tag": "architecture",
    "name": "Архитектура js",
    "list": [
      {
        "question": "Feature sliced design или FSD архитектура - расскажите про данную архитектуру",
        "answer": "Архитектурная методология для front-end проектов,  Проще говоря, это набор правил и соглашений по организации кода. Задача распределять код по папкам так что бы было понятно где что находится, внутренние слой распределяются так же по смыслу и далее более глубокие слой, верхние слой при изменений не должны влиять на нижние",
        "audio": "/architecture/fsd_architecture.wav"
      },
      {
        "question": "Domain - Driven - Design или DDD архитектура - расскажите про данную архитектуру",
        "answer": "Суть в уже знакомом делении проекта на модули / фичи. Создаем папку modules, если есть пользователи, посты, какой нибудь конструктор сценариев, то появляются модули users, posts, scenarios-constructor.У каждого слоя модуля есть ограничения, он не может иметь доступ и использовать код с уровня ниже",
        "audio": "/architecture/ddd_architecture.wav"
      },
      {
        "question": "что такое архитектура REST",
        "answer": "REST — это архитектурный стиль API.Он не ограничивается никакими протоколами и не имеет собственных методов. Но обычно в RESTful-сервисах используют стандарт HTTP, а файлы передают в формате JSON или XML.Есть шесть принципов, на которых строится REST: клиент-серверная модель, отсутствие состояния, кэширование, единообразие интерфейса, многоуровневая система, код по требованию. Последний из них необязателен.REST-подход к архитектуре позволяет сделать сервисы отказоустойчивыми, гибкими и производительными, а при их масштабировании и внесении изменений не возникает больших сложностей.",
        "audio": "/architecture/rest.wav"
      },
      {
        "question": "dry методология",
        "answer": "основополагающий принцип разработки. Он расшифровывается как Don't repeat yourself — «не повторяйтесь». Когда пишете код, всегда думайте о том, как можно переиспользовать тот или иной фрагмент, что можно выделить в универсальную функцию или класс, сделать модулем",
        "audio": "/architecture/dry.wav"
      },
      {
        "question": "принцип проектирования KISS",
        "answer": "принцип проектирования KISS (keep it simple and straightforward) провозглашает, что простота кода – превыше всего, потому что простой код – наиболее понятный.",
        "audio": "/architecture/kiss.wav"
      }
    ]
  },
  {
    "tag": "hr",
    "name": "HR вопросы",
    "list": [
      {
        "question": "Расскажите о себе, Какими проектами занимались? Что интересного было",
        "answer": "Разговорный вопрос",
        "audio": "/hr/Tell_us_about_yourself.wav",
        "time": 3
      },
      {
        "question": "Расскажите о предыдущем месте работы",
        "answer": "Разговорный вопрос",
        "audio": "/hr/Tell_us_about_your_previous_job.wav",
        "time": 3
      },
      {
        "question": "Что для вас ценно в компаний?",
        "answer": "Разговорный вопрос",
        "audio": "/hr/What_is_valuable_to_you_in_companies.wav",
        "time": 3
      },
      {
        "question": "Расскажите об интересном проекте, о том что вам запомнилось",
        "answer": "Разговорный вопрос",
        "audio": "/hr/Tell_us_about_an_interesting_project.wav",
        "time": 3
      },
      {
        "question": "Расскажите о трудностях с которыми вы сталкивались и как с ними справились",
        "answer": "Разговорный вопрос",
        "audio": "/hr/Tell_us_about_the_difficulties_you_have_faced.wav",
        "time": 3
      }
    ]
  },
  {
    "tag": "base",
    "name": "Базовые вопросы",
    "list": [
      {
        "question": "что это такое - DOM",
        "answer": "Document Object Model объектное представление html документа в javascript где каждый внутренний тег является дочерним массивом и вся эта структура выглядит в виде дерева",
        "audio": "/base/dom.wav"
      },
      {
        "question": "В чём отличие обычного DOM от Virtual DOM",
        "answer": "",
        "audio": "/base/dom_virtal_dom.wav"
      },
      {
        "question": "Что такое HTTP? Как он устроен? Как работает?",
        "answer": "это это протокол, позволяющий получать различные ресурсы в интернете, является протоколом клиент-серверного взаимодействия",
        "audio": "/base/http.wav"
      },
      {
        "question": "Из чего состоит HTTP?",
        "answer": "HEAD BODY",
        "audio": "/base/http_body.wav",
        "time": 0.5
      },
      {
        "question": "Назовите методы HTTP которые вы знаете.",
        "answer": "GET POST PUT DELETE",
        "audio": "/base/metod_http.wav",
        "time": 0.5
      },
      {
        "question": "Что такое DNC",
        "answer": "это система доменных имён, которая сообщает браузеру по какому ip адресу идти, если браузер не знает, dnc - server",
        "audio": "/base/dnc.wav"
      },
      {
        "question": "Расскажите про AJAX",
        "answer": "Это набор методов веб-разработки, Недостатки Динамический контент не доступен для поисковиков",
        "audio": "/base/ajax.wav"
      },
      {
        "question": "Метод GET и POST, Расскажите о них, чем отличаются.",
        "answer": "Метод осуществляет запрос к серверу, у которого  все данные передаются в строке запроса.",
        "audio": "/base/get_post.wav"
      },
      {
        "question": "Метод GET можно ли в него поместить BODY",
        "answer": "Метод осуществляет запрос к серверу, у которого  все данные передаются в строке запроса.",
        "audio": "/base/get_body.wav"
      },
      {
        "question": "Назовите основные коды ответа сервера",
        "answer": "2 ок, 3 редирект, 4 ошибка клиента, 5 ошибка сервера",
        "audio": "/base/code_server.wav"
      },
      {
        "question": "Расскажите про протокол TCP",
        "answer": "TCP — это сокращение от Transmission Control Protocol (протокол управления передачей). TCP обозначает набор стандартизированных правил для обмена данными между различными устройствами в сети.",
        "audio": "/base/tcp.wav"
      },
      {
        "question": "Формат JSONP, что это, и зачем нужен",
        "answer": "это дополнение к базовому формату JSON. Он предоставляет способ запросить данные с сервера, находящегося в другом домене.",
        "audio": "/base/jsonp.wav"
      },
      {
        "question": "Расскажите про websocket, чем он отличается от HTTP, и где вы применяли его",
        "answer": "независимый веб-протокол, который позволяет создавать интерактивное соединение между сервером и клиентом (браузером) и обмениваться сообщениями в реальном времени. В отличие от HTTP, веб-сокеты позволяют работать с двунаправленным потоком данных",
        "audio": "/base/websocket.wav"
      },
      {
        "question": "MIME ТИП В ЗАПРОСАХ - что это такое, и пример отличия картинки от текста",
        "answer": "по нему можно определить что за тип содержимого нам пришло с сервера",
        "audio": "/base/mime.wav"
      },
      {
        "question": "Расскажите про Http only, и на что он влияет?",
        "answer": "это серверные куки,к которым нет доступа на клиенте",
        "audio": "/base/http_only.wav"
      },
      {
        "question": "СТРУКТУРЫ ДАННЫХ - что это такое, назовите какие знаете",
        "answer": "Структура данных — это способ организации информации для более эффективного использования. В программировании структурой обычно называют набор данных, связанных определённым образом. массив, динамический массив, связный список, стек, очередь, Set, Map, Двоичное дерево поиска, Префиксное дерево,Граф",
        "audio": "/base/data_structures.wav"
      },
      {
        "question": "Расскажите про структуру данных МАССИВ",
        "answer": "Это наиболее простой пример структуры данных. Массив — это линейная последовательность значений, у каждого из которых есть свой номер. Номера называются индексами — по ним можно получить доступ к любому элементу массива.",
        "audio": "/base/data_structures_array"
      },
      {
        "question": "Расскажите про структуру данных ДИНАМИЧЕСКИЙ МАССИВ",
        "answer": "динамический массив — это тот, у которого размер может изменяться",
        "audio": "/base/data_structures_din_array.wav"
      },
      {
        "question": "Расскажите про структуру данных СВЯЗНЫЙ СПИСОК",
        "answer": "Еще один распространенный пример линейной структуры данных. Это последовательность элементов, каждый из которых хранит данные и ссылку на следующий или предыдущий элемент. В результате от одного элемента можно быстро получить доступ к его «соседу».\n\nСами элементы, в отличие от массива, хранятся отдельно друг от друга. У них нет номеров. Последовательность достигается исключительно за счет указателей «следующий» и «предыдущий». Последний элемент будет указывать на «пустое» значение.",
        "audio": "/base/data_structures_sv_list.wav"
      },
      {
        "question": "Расскажите про структуру данных СТЕК",
        "answer": "Стек — структура, обратная очереди. Это последовательность, в которой доступ работает по принципу LIFO: Last In, First Out. Элементы добавляются в конец, а быстро получить и извлечь их можно опять же с конца. То есть чем позже элемент добавили в стек, тем легче до него добраться.",
        "audio": "/base/data_structures_stack.wav"
      },
      {
        "question": "Расскажите про структуру данных ОЧЕРЕДЬ",
        "answer": "Очередь похожа на массив. Это тоже линейная структура, состоящая из последовательности элементов. Разница в том, что доступ к этим элементам возможен только по принципу FIFO: First In, First Out. Это значит, что из очереди можно быстро и легко извлечь элемент, который расположен в самом ее начале и находится в ней дольше всего. А вот операций для доступа с конца или из середины может вообще не быть",
        "audio": "/base/data_structures_queue.wav"
      },
      {
        "question": "Расскажите про структуру данных SET",
        "answer": "В отличие от предыдущих базовых структур, во множестве данные не упорядочены. Они хранятся группой, их нельзя структурировать и в некоторых случаях нельзя сортировать.\n",
        "audio": "/base/data_structures_set.wav"
      },
      {
        "question": "Расскажите про структуру данных MAP",
        "answer": "Её ещё называют ассоциативным массивом или словарём. Данные здесь хранятся в паре «ключ/значение», причем каждый ключ уникален, а вот значения могут повторяться.\n",
        "audio": "/base/data_structures_map.wav"
      },
      {
        "question": "Расскажите про структуру данных ДВОИЧНОЕ ДЕРЕВО ПОИСКА",
        "answer": "Дерево — это структура, данные в которой лежат в узлах. У каждого узла могут быть один или несколько дочерних и только один родитель, то есть они расходятся, как ветви дерева:\n",
        "audio": "/base/data_structures_"
      },
      {
        "question": "Расскажите про структуру данных ПРЕФИКСНОЕ ДЕРЕВО",
        "answer": "Другие названия этой структуры данных — Бор и нагруженное дерево. Данные в нём хранятся последовательно: каждый узел — это префикс, по которому находятся следующие узлы.\n",
        "audio": "/base/data_structures_prefix_tree.wav"
      },
      {
        "question": "Расскажите про структуру данных ГРАФ",
        "answer": "Граф — нелинейная структура организации данных, которая состоит из «вершин» и «ребер» между ними. Каждая вершина — это значение, а ребра — пути, которые соединяют между собой вершины. Получается своеобразная «сетка», похожая на карту дорог или созвездие.",
        "audio": "/base/data_structures_graph.wav"
      }
    ]
  },
  {
    "tag": "cycles",
    "name": "Коллекций, Объекты, Циклы",
    "list": [
      {
        "question": "что такое OBJECT для javascript",
        "answer": "javascript представляет его ассоциативным массивом хранящим ключь=>значение, и имеющий несколько стандартных методов create,values\n",
        "audio": "/cycle/oblect.wav"
      },
      {
        "question": "Нативные объекты - Это? - перечислите какие знаете ",
        "answer": "объекты, которые являются частью языка JavaScript String , Math , RegExp , Object , Function\n",
        "audio": "/cycle/oblect_native.wav"
      },
      {
        "question": "Что такое - хост объекты?",
        "answer": "предоставляются средой выполнения (браузером или Node), такие как ` window `, ` XMLHTTPRequest `",
        "audio": "/cycle/host.wav"
      },
      {
        "question": "что такое МАССИВ ?  Назовите его методы которые знаете",
        "answer": "это тот же объект но с дополнительными методами к примеру length push slice splice",
        "audio": "/cycle/array.wav"
      },
      {
        "question": "В чём разница между атрибутом и свойством?",
        "answer": "свойства - это свойства самого объекта, а атрибуты - это элементы свойства attributes этого объекта",
        "audio": "/cycle/attr_sv.wav"
      },
      {
        "question": "Расскажите про OBJECT.FREEZE, Для чего он применяется?",
        "answer": "замораживает объект: это значит, что он предотвращает добавление новых свойств к объекту, удаление старых свойств из объекта и изменение существующих свойств или значения их атрибутов перечисляемости, настраиваемости и записываемости.\n",
        "audio": "/cycle/freeze.wav"
      },
      {
        "question": "Что такое Прототипы, Прототипное наследование. В чём разница между prototype и __proto__",
        "answer": "это механизм, с помощью которого объекты наследуют свойства друг от друга",
        "audio": "/cycle/proto.wav",
        "time": 2
      },
      {
        "question": "Как проверить наличие свойства у объекта?",
        "answer": "obj.hasownProperty(\"a\")",
        "audio": "/cycle/sv.wav",
        "time": 0.5
      },
      {
        "question": "Что такое конструктор? - Для чего он применяется?",
        "answer": "это либо функция либо оператор New позволящие нам создавать объекты",
        "audio": "/cycle/constructor.wav"
      },
      {
        "question": "Перечислите коллекций в javascript-е ",
        "answer": "SET, WeakSet MAP, WeakMap, МАССИВ",
        "audio": "/cycle/collection.wav",
        "time": 0.5
      },
      {
        "question": "Что такое коллекция SET",
        "answer": "Set (по-русски говорят множество) — коллекция для хранения уникальных значений любого типа. Одно и то же значение нельзя добавить в Set больше одного раза. ",
        "audio": "/cycle/col_set.wav"
      },
      {
        "question": "Что такое коллекция MAP",
        "answer": "коллекция пар ключ-значение. ключ может быть любым хоть числом хоть строкой",
        "audio": "/cycle/col_map.wav"
      },
      {
        "question": "Расскажите про weakset и weakmap?",
        "answer": "их ключами могут быть только объекты",
        "audio": "/cycle/weakset_weakmap.wav"
      },
      {
        "question": "Перечислите циклы в javascript-е и кратко расскажите про их отличия.",
        "answer": "for,forEach,map,filter,reduce, while",
        "audio": "/cycle/cycle.wav",
        "time": 3
      },
      {
        "question": "Опишите цикл forEach",
        "answer": "выполняет функцию callback один раз для каждого элемента",
        "audio": "/cycle/forEach.wav"
      },
      {
        "question": "Опишите цикл Map",
        "answer": "выполняет функцию callback и возврощаемое значение добавляется в новый массив",
        "audio": "/cycle/cycle_map.wav"
      },
      {
        "question": "Опишите цикл filter",
        "answer": "создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.\n",
        "audio": "/cycle/filter.wav"
      },
      {
        "question": "Опишите цикл reduce",
        "answer": "применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно результирующее значение.\n",
        "audio": "/cycle/reduce.wav"
      },
      {
        "question": "Опишите цикл while",
        "answer": "выполняется пока условие истина",
        "audio": "/cycle/while.wav"
      }
    ]
  },
  {
    "tag": "html",
    "name": "Вёрстка",
    "list": [
      {
        "question": "для чего нужен doctype, и назовите отличия в их версиях",
        "answer": "необходима, чтобы браузер понимал как обрабатывать текущую веб-страничку, так как существует несколько версий языка HTML",
        "audio": "/base/doctype.wav"
      },
      {
        "question": "Что такое CSS BOX MODEL",
        "answer": "это модель, которая описывает, из чего состоит бокс и какие свойства влияют на его размеры. В ней у каждого бокса есть 4 области: margin (внешние отступы), border (рамка), padding (внутренние поля), и content ",
        "audio": "/html/box.wav"
      },
      {
        "question": "В чём разница между TRANSITION и ANIMATION",
        "answer": "TRANSITION позволяет сделать плавную анимацию двигаясь от точки А к точке Б, ANIMATION позволяют анимировать переходы от одной конфигурации CSS стилей к другой",
        "audio": "/html/tr_an.wav"
      },
      {
        "question": "Какие @media запросы вы знаете?",
        "answer": "PRINT для принтеров, (color) применятся ко всем цветным экранам, Retina для маковских устройств",
        "audio": "/html/media.wav"
      },
      {
        "question": "Какие  селекторы вы знаете? - Расскажите про их иерархию и вес",
        "answer": "~, *,id,class теги",
        "audio": "/html/sel.wav",
        "time": 2
      },
      {
        "question": "Какие псевдо элементы вы знаете?",
        "answer": ":before  :after :placeholder",
        "audio": "/html/pseudo_elements.wav",
        "time": 0.5
      },
      {
        "question": "Какие псевдо классы вы знаете?",
        "answer": ":link :visited :checked ,:hover :active :first-of-type :disabled, :nth-child(2n+12) если выделить какой то после нескольких",
        "audio": "/html/pseudo_classes.wav"
      },
      {
        "question": "Что такое миксины",
        "answer": "это заданный нами отдельной кусок css кода который мы переиспользуем много раз либо в оригинальном варианте либо передавая ему через переменные новые значения",
        "audio": "/html/mix.wav"
      },
      {
        "question": "html entities это?",
        "answer": "HTML сущности это это части текста ('строки'), которые начинаются с символа амперсанда ( & ) и заканчиваются точкой с запятой ( ; ) пример не разрывный пробел, символ рубля в коде и подобные",
        "audio": "/html/entities.wav"
      }
    ]
  },
  {
    "tag": "javascript",
    "name": "Javascript",
    "list": [
      {
        "question": "Какие типы данных вы знаете?",
        "answer": "number,string,null,undefined,boolean,объект,символ,bigint. Строки, числа, булевые это примитивные типы остальные сложные",
        "audio": "/javascript/data_types.wav"
      },
      {
        "question": "в чём отличие null ОТ undefined",
        "answer": "null пустое значение undefined не определено",
        "audio": "/javascript/null_undefined.wav",
        "time": 0.5
      },
      {
        "question": "Расскажите про нан? - В каких случаях переменная ровна ему?",
        "answer": "not n number значение не число, когда привидение к числу не срабатывает",
        "audio": "/javascript/nan.wav",
        "time": 0.5
      },
      {
        "question": "В чём отличие у VAR - LET -и- CONST",
        "answer": "var можно пересоздавать и менять ЗНАЧЕНИЕ, имеет область видимости ограниченную функцией , \nlet создаёт область видимости внутри блока {} пересозданная let внутри {} значение остаётся внутри, переназначенная внутри {} передаёт значение наружу,обл видимости let = const",
        "audio": "/javascript/var_let_const.wav"
      },
      {
        "question": "Что такое мёртвая зона? И у кого она присутствует. В каких случаях?",
        "answer": "let const не подверженны всплытию по этому между местом их объявления и верхней границей области видимости мёртвая зона",
        "audio": "/javascript/deat.wav"
      },
      {
        "question": "что такое HOSTING",
        "answer": "это когда обявленные переменные поднимаются на верх всплывая до верха своего уровня видимости",
        "audio": "/javascript/hosting.wav"
      },
      {
        "question": "Что такое javascript?",
        "answer": "интерпретируемый, слабо типизирован, Язык для динамического управления контентом",
        "audio": "/javascript/javascript.wav"
      },
      {
        "question": "Расскажите про EVENT LOOP. Как он работает? И есть ли способы влиять на него?",
        "answer": "Цикл событий в JAVASCRIPT, он разбивает задачи на Микро таски, макро таски",
        "audio": "/javascript/event_loop.wav"
      },
      {
        "question": "Что такое аттрибуты ASING и DEFER, чем отличаются?",
        "answer": "при обнаружении <script async src=\"...\"> браузер не останавливает обработку страницы, а спокойно работает дальше. Когда скрипт будет загружен – он выполнится. Скрипт также выполняется асинхронно, не заставляет ждать страницу, но есть два отличия от async.\t\t\n\t\t\tПервое – браузер гарантирует, что относительный порядок скриптов с defer будет сохранён.\n\t\t\tВторое отличие – скрипт с defer сработает, когда весь HTML-документ будет обработан браузером.\n",
        "audio": "/javascript/asing_defer.wav"
      },
      {
        "question": "Что такое ДЕСКРИПТОРЫ",
        "answer": "позволяют ограничивать доступ, чтение определённых свойст пример setter-на чтение, getter-на запись, rait-на запись, enumerebol-будет ли это свойство перечислятся среди свойст объекта\n",
        "audio": "/javascript/descriptor.wav"
      },
      {
        "question": "Что такое GETTER и SETTER",
        "answer": "свойства GETTER срабатывает, когда объект читается, сеттер – когда значение присваивается",
        "audio": "/javascript/getter_setter.wav"
      },
      {
        "question": "Как проверить тип данных",
        "answer": "typeof(x) возвращает тип данных аргумента",
        "audio": "/javascript/typeof.wav",
        "time": 0.5
      },
      {
        "question": "Как проверить тип данных объект",
        "answer": "Array.isArray()",
        "audio": "/javascript/isArray.wav",
        "time": 0.5
      },
      {
        "question": "Проверить на NAN",
        "answer": "Array.isNaN()",
        "audio": "/javascript/isNaN.wav",
        "time": 0.5
      },
      {
        "question": "Какие операторы вы знаете?",
        "answer": "Сравнение,Присваивание,Арифметические,Тернарный,Логический",
        "audio": "/javascript/operators.wav"
      },
      {
        "question": "Расскажите про логические операторы",
        "answer": "|| (ИЛИ), && (И) и ! (НЕ), ?? (Оператор нулевого слияния) a || b если один из a,b = true вернёт true \n",
        "audio": "/javascript/logical_operators.wav"
      },
      {
        "question": "Что такое тернарный оператор? и в чём отличие от if",
        "answer": "оператор в JavaScript, принимающий три операнда: условие, за которым следует знак вопроса (?), затем выражение, которое выполняется, если условие истинно, сопровождается двоеточием (:)  \nи наконец выражение, которое выполняется, если условие ложно.\n",
        "audio": "/javascript/tern.wav"
      },
      {
        "question": "двойное == и тройное === сравнение в чём отличие",
        "answer": "первый сравнивает значения после их преобразования к одному типу, а второй — без приведения \n(undefined==null=true) ('0'==false=true) (false=='',[]=true)  (false=={}=false) (''==0,[]=true) (''=={}=false) (0==[]=true) (0=={},null=false)\n",
        "audio": "/javascript/2_3_oper.wav"
      },
      {
        "question": "Назовите ложные значения",
        "answer": "false,Number : 0 И -0, \"\" '',undefined,null,nan,bigint(0) ЕСЛИ ДЛИНА СТРОКИ 0",
        "audio": "/javascript/false_values.wav"
      },
      {
        "question": "Расскажите что такое Api",
        "answer": "это программный интерфейс для общения компонентов программы друг с другом\n",
        "audio": "/javascript/api.wav"
      },
      {
        "question": "Какие протоколы в API вы знаете",
        "answer": "REST RPC GraphQL SOAP",
        "audio": "/javascript/rest_api.wav",
        "time": 0.5
      },
      {
        "question": "что такое ДЕКОМПОЗИЦИЯ или ДЕСТРУКТУРИЗАЦИЯ",
        "answer": "это синтаксис присваивания, при котором можно присвоить массив или объект сразу нескольким переменным, разбив его на части.  let {name, email} = user; user исходный объект",
        "audio": "/javascript/decomposition.wav"
      },
      {
        "question": "что такое SPREED-ОПЕРАТОР и для чего он нужен",
        "answer": "это три точки перед именем переменной (или константы) Он раскладывает соответствующий объект внутри нового объекта. С его помощью можно получить только копию, он не может изменять существующие объекты.",
        "audio": "/javascript/spreed.wav"
      },
      {
        "question": "Расскажите про РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ",
        "answer": "это шаблоны, используемые для сопоставления последовательностей символов в строках. применяется к примеру в match, replace, search\n",
        "audio": "/javascript/regular_expressions.wav"
      }
    ]
  },
  {
    "tag": "typescript",
    "name": "Typescript",
    "list": [
      {
        "question": "Что такое TypeScript",
        "answer": "TypeScript представляет язык программирования на основе JavaScript, компилируемый язык, так же он реализует концепций ооп и наследование, полиморфизм, инкапсуляция и модификаторы доступа и так далее, упрощает написание сложного кода\n",
        "audio": "/typeScript/typeScript.wav"
      },
      {
        "question": "Что такое декораторы? И что они делают",
        "answer": "инструмент позволяющий добавить к классам и их членам метаданные и тем самым изменить их поведение без изменения их кода (функция, которую надо добавить перед классом свойством или методом со знаком @) применяются к классам\n",
        "audio": "/typeScript/decorators.wav"
      },
      {
        "question": "Для чего нужен implements",
        "answer": "Класс, реализующий интерфейс, обязан реализовывать его в полной мере. Любой класс, который хочет реализовать интерфейс, должен указать это с помощью ключевого слова implements",
        "audio": "/ecmascript/implements.wav"
      },
      {
        "question": "Что такое модификаторы доступа",
        "answer": "public\n\t\t\tprotected определяет поля и методы, которые из вне класса видны только в классах-наследниках:\n\t\t\tprivate, то к ним нельзя будет обратиться извне при создании объекта данного класса.\n",
        "audio": "/typeScript/access_modifiers.wav"
      },
      {
        "question": "утиная типизация это?",
        "answer": "определение факта реализации определённого интерфейса объектом без явного указания или наследования этого интерфейса, а просто по реализации полного набора его методов\n",
        "audio": "/typeScript/duck_typing.wav"
      },
      {
        "question": "Для чего нужен TYPE Оператор?",
        "answer": "Оператор type позволяет определить новый псевдоним для существующего типа. Слово «псевдоним» используется неслучайно. Оператор фактически добавляет дополнительное имя для существующего типа. Новый тип данных при этом не создаётся.",
        "audio": "/typeScript/type_operator.wav"
      },
      {
        "question": "Расскажите про INTERFACE. Где и когда они приминяются?",
        "answer": "это синтаксическая конструкция, предназначенная для описания открытой ( public ) части объекта без реализации (api) interface rect {readonly id: string color?: string} readonly ? означает не обязательный const rect1: Rect = {id: '1234',color: 'black'}\n",
        "audio": "/typeScript/interface.wav"
      },
      {
        "question": "В чём отличие ИНТЕРФЕЙСА от ТИПА",
        "answer": "Типы являются более предпочтительным вариантом, так как вы можете заменить интерфейсы типами, но не наоборот. Для использования продвинутой функциональности TypeScript - mapped типов, объединения типов и условных типов \nинтерфейсы не подойдут.",
        "audio": "/typeScript/in_type.wav"
      },
      {
        "question": "что такое ENUM",
        "answer": "Enum — это конструкция, состоящая из набора именованных констант, именуемая списком перечисления и определяемая такими примитивными типами, как number и string. Enum объявляется с помощью ключевого слова enum. enum Fruits {\n  Apple, // 0\n  Pear, // 1\n  Banana, // 2\n}",
        "audio": "/typeScript/enum.wav"
      },
      {
        "question": "что такое READONLY",
        "answer": "означает только для чтения",
        "audio": "/typeScript/readonly.wav"
      },
      {
        "question": "Расскажите про GENERICS типы, и для чего они нужны?",
        "answer": "параметр-тип T, используется указывая функций что она будет работать с разными типами данных fun revers <T>(arrray:T[]): T[]\n",
        "audio": "/typeScript/generics.wav"
      }
    ]
  },
  {
    "tag": "function",
    "name": "Функций и события",
    "list": [
      {
        "question": "Что такое FUNCTION,Какую роль она выполняет?",
        "answer": "это объект, которым можно манипулировать, передать параметры,  функция может что то возвращать,используются как бы для инкапсуляций логики,нупо сути и является строительным инструментом для обособления некого функционала \n",
        "audio": "/function/function.wav"
      },
      {
        "question": "FUNCTION EXPRESSION и FUNCTION DECLARATION",
        "answer": "FUNCTION EXPRESSION объявление функции в контексте какого-либо выражения, например присваивания, к примеру в map, данная функция должна что то вернуть помещается в переменную FUNCTION DECLARATION можем использовать в любой момент(имеет имя) которое служит в качестве переменной",
        "audio": "/function/f_ex_f_de.wav"
      },
      {
        "question": "Что такое КОНТЕКСТ, и как он появляется",
        "answer": "если функция стрелочная то берётся из окружения так как не имеет своего если обычная то берёт от туда от куда была вызвана, контекст может быть своим либо переданным через call aplay, bind то же может изменить контекст но только 1 раз\n",
        "audio": "/function/contekst.wav"
      },
      {
        "question": "Чем отличается контекст от области видимости?",
        "answer": "область видимости относится к переменным а контекст относится к функций к тому что оперирует данными,и они применяются по разному\n",
        "audio": "/function/contecst_area.wav"
      },
      {
        "question": "Что такое ЧИСТАЯ ФУНКЦИЯ?",
        "answer": "это функция которая выдаёт нам ожидаемый результат",
        "audio": "/function/clear_function.wav"
      },
      {
        "question": "Что такое АНОНИМНАЯ ФУНКЦИЯ?",
        "answer": "часто используются для выполнения какого-то кода в коллбэках, где в целом не нужно создавать отдельную именную функцию под это действие",
        "audio": "/function/anon_function.wav"
      },
      {
        "question": "Что такое eval? И Для чего он нужен? В чём риск его использования?",
        "answer": "опасная функция, которая позволяет создать код на лету и выполнить его, это делает код не безопастным, так как мы можем подменить код и он выполнится, по сути это  код на который могут влиять злоумышленники,\n и который выполнится на правах нашей строницы",
        "audio": "/function/eval.wav"
      },
      {
        "question": "Что такое ЗАМЫКАНИЕ? - Приведите пример использования.",
        "answer": "функция внутри функций, это способность функций,  запоминать ссылки на переменные и параметры, на своём уровне видимости, примменение когда надо переменную сделать приватной и не доступной из вне кроме как через функцию\n",
        "audio": "/function/closure.wav"
      },
      {
        "question": "Что такое EVENT?",
        "answer": "объект который содержит свойства, описывающие некое событие.",
        "audio": "/function/event.wav"
      },
      {
        "question": "Что такое THIS?",
        "answer": "это переменная в функции, ссылка на объект который вызывает эту функцию или текущий элемент, до которого дошло всплытие и на нём сейчас выполняется обработчик.\n",
        "audio": "/function/thiz.wav"
      },
      {
        "question": "Что такое SCOPE?",
        "answer": "это внутреннее скрытое свойство функции, которое она получает во время вызова,  обратится можно через THIZ\n",
        "audio": "/function/scoope.wav"
      },
      {
        "question": "Что делает метод CALL, И есть ли него отличия от BIND и APPLAY",
        "answer": "позволяет вызвать функцию с заданным контекстом. Первым параметром метода следует указывать контекст функции, а остальными параметрами - параметры функции. fun.call(thisArg[, arg1[, arg2[, ...]]])\n",
        "audio": "/function/metod_call.wav"
      },
      {
        "question": "Что делает метод APPLAY, И есть ли него отличия от CALL и BIND",
        "answer": "то же самое но только ВТОРОЙ ПАРАМЕТР ОБЯЗАТЕЛЬНО МАССИВ fun.apply(thisArg, [argsArray])\n",
        "audio": "/function/metod_applay.wav"
      },
      {
        "question": "Что делает метод BIND, И есть ли него отличия от CALL и APPLAY",
        "answer": "не вызывает а возвращает новую функцию  fun.bind(thisArg[, arg1[, arg2[, ...]]])\n",
        "audio": "/function/metod_bind.wav"
      },
      {
        "question": "Назовите ОБРАБОТЧИКИ СОБЫТИИ в javascript-е",
        "answer": "click,submit,keydown,keyup и подобные",
        "audio": "/function/event_handlers.wav"
      },
      {
        "question": "Расскажите про ВСПЛЫТИЕ и ПОГРУЖЕНИЕ, И есть ли способы их остановить",
        "answer": "ВСПЛЫТИЕ Когда на элементе происходит событие, обработчики сначала срабатывают на нём, потом на его родителе, затем выше и так далее, вверх по цепочке предков.\n\t\t\tПОГРУЖЕНИЕ событие путешествует по цепочке родителей сначала вниз к элементу (погружается), затем оно достигает целевой элемент (фаза цели), а потом идёт наверх (всплытие), вызывая по пути обработчики.\n\t\t\tДля остановки всплытия нужно вызвать метод event. stopPropagation()\n",
        "audio": "/function/ascent_dive.wav"
      },
      {
        "question": "Функция assign, Для чего она нужна? И какие ещё варианты есть",
        "answer": "функция для копирования объектов, и избавления от ссылочной зависимости, но если внутри объекта будет ещё объект то ссылка на него сохраняется так же можно использовать приведение к строке, или stranger clone, либо использовать рекурсивное копирование",
        "audio": "/function/assign.wav"
      },
      {
        "question": "Расскажите про ДЕЛЕГИРОВАНИЕ",
        "answer": "Вместо прикрепления обработчиков событий прямо к кнопкам, мы делегируем отслеживание этого события родительскому элементу <div id=\"buttons\">. Когда нажимается кнопка, обработчик, назначенный родительскому элементу ловит\n всплывающее событие затем через event.target проверяем на какой кнопке произошёл клик\n",
        "audio": "/function/delegation.wav"
      },
      {
        "question": "Reflow, Repaint, Composite — что это и как это работает?",
        "answer": "Repaint происходит, когда нужно обновить визуальные стили элемента, не затрагивая его размеры и положение. Это как перекрасить стену, не трогая мебель. Reflow, напротив, — это более глобальный процесс, который включается при изменении размеров, положения элементов или при добавлении/удалении элементов.После того как браузер знает размеры, позицию и то в какой последовательности красить элементы, наступает пора конечной отрисовки элементов на странице. Для этого браузер на этапе Composite группирует различные элементы по слоям, растрирует эти слои, то есть отрисовывает пиксели и затем объединяет эти слои в готовую страницу в отдельном потоке композитора (compositor thread ). Все это делается для повышения производительности страницы. Теперь при скролле страницы достаточно просто сдвинуть в необходимый отрисованный слой и заново объединить слои в потоке композитора.",
        "audio": "/function/reflow_Repaint_Composite.wav"
      },
      {
        "question": "Что такое feature detection",
        "answer": "Определение возможностей браузера заключается в определении, поддерживает ли браузер определенный блок кода — и если нет, то будет выполняться другой код, так что браузер всегда сможет обеспечить работоспособность и предотвратить сбои/ошибки в некоторых браузерах.",
        "audio": "/function/feature_detection.wav"
      },
      {
        "question": "INTERFERENCE",
        "answer": "inference определяет возможные способности браузера",
        "audio": "/function/generics.wav"
      },
      {
        "question": "что такое USER AGENT",
        "answer": "User Agent определяет тип браузера",
        "audio": "/function/user_agent.wav"
      },
      {
        "question": "Как проверить значение, на целое число",
        "answer": "делим на 1 и проверяем остаток console.log(5 % 1) = thue",
        "audio": "/function/an_integer.wav"
      },
      {
        "question": "Что такое Функция IIEF",
        "answer": "Функций моментального вызова",
        "audio": "/function/iief.wav"
      }
    ]
  },
  {
    "tag": "async",
    "name": "Асинхронность",
    "list": [
      {
        "question": "Расскажите про Promise. И какие методы они имеют",
        "answer": "объект использующийся для отложенных и асинхронных вычислений. Используется когда надо что бы одна часть кода выполнялась после другой к примеру при работе с сервером, имеет состояния Ожидающий выполенный отклонённый .all .allSettled Полифил .race .reject  .resolve ",
        "audio": "/async/promise.wav",
        "time": 2
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.ALL",
        "answer": "возвращает промис, который выполнится тогда, когда будут выполнены все промисы, переданные в виде перечисляемого аргумента, или отклонено любое из переданных промисов.\n",
        "audio": "/async/promise_all.wav"
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.ALLSETTLED",
        "answer": "возвращает промис, который исполняется когда все полученные промисы завершены (исполнены или отклонены), содержащий массив результатов исполнения полученных промисов.\n",
        "audio": "/async/promise_allSettled.wav"
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.RESOLVE",
        "answer": "возвращает Promise выполненный с переданным значением",
        "audio": "/async/promise_resolve.wav"
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.REJECT",
        "answer": "возвращает Promise который был отклонён",
        "audio": "/async/promise_resject.wav"
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.RACE",
        "answer": "возвращает выполненный или отклонённый промис, в зависимости от того, с каким результатом завершится первый из переданных промисов, со значением или причиной\n отклонения этого промиса.",
        "audio": "/async/promise_race.wav"
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.THEN",
        "answer": "Универсальный метод для навешивания обработчиков",
        "audio": "/async/promise_then.wav"
      },
      {
        "question": "Расскажите про МЕТОД PROMISE.CATCH",
        "answer": "бработчик только на ошибку, вместо .then",
        "audio": "/async/promise_all.wav"
      },
      {
        "question": "ASYNG/AWAIT что вы знаете о них?",
        "answer": "специальный синатксис, функция помеченная asyng возвращаемый результат оборачивает как промис и внутри мы можем использовать await\n",
        "audio": "/async/asyng_await.wav"
      },
      {
        "question": "Чем отличаются  ПРОМИСЫ от ASYNG/AVAYT",
        "answer": "более лакончное написание, отсуствие вложнности",
        "audio": "/async/asyng_await_prom.wav"
      },
      {
        "question": "ПРОМИСЫ СТАТУСЫ",
        "answer": "pending ожидание,fulfilled исполнено, rejected отклонено, 4 статус действия окончены",
        "audio": "/async/promise_status.wav"
      }
    ]
  },
  {
    "tag": "es6",
    "name": "Ecmascript 6",
    "list": [
      {
        "question": "TEMPLATE LITERALS, ШАБЛОННЫЕ ЛИТЕРАЛЫ",
        "answer": "это кривые ковычки `` позволяющие вставлять js в код html  ` ${ X-test }  `",
        "audio": "/ecmascript/temp_literal.wav"
      },
      {
        "question": "НАСЛЕДОВАНИЕ, EXTENDS, Что вы знаете о нём?",
        "answer": "Это механизм, который позволяет создавать подклассы на основе уже существующих классов. Подклассы наследуют свойства и методы родительского класса и могут расширять их.",
        "audio": "/ecmascript/extends.wav"
      },
      {
        "question": "ecmascript классы, Расскажите что знаете о них",
        "answer": "это расширяемый шаблон кода для создания объектов, который устанавливает в них начальные значения (свойства) и реализацию поведения (методы)\n",
        "audio": "/ecmascript/class.wav"
      },
      {
        "question": "Что такое АБСТРАКТНЫЙ КЛАСС, - Какую задачу он выполняет?",
        "answer": "они не компилируются а используются в основном для наследования от них в процессе разработки, в них присутствуют обстрактные методы\n",
        "audio": "/ecmascript/abstr_class.wav"
      },
      {
        "question": "Для чего применяются IMPORT/EXPORT модулей",
        "answer": "используются на этапе разработки и в конце всё сливается в единый файл байдинг,применённый импорт не дублируется и если мы импортировали несколько раз одно и то же то применится оно 1 раз\n",
        "audio": "/ecmascript/import_export.wav"
      },
      {
        "question": "Что такое СТАТИЧЕСКИЙ КЛАСС, - какую задачу он выполняет?",
        "answer": "класс, состоящий исключительно из статических методов и свойств.\n",
        "audio": "/ecmascript/static_class.wav"
      }
    ]
  },
  {
    "tag": "oop",
    "name": "ООП",
    "list": [
      {
        "question": "Расскажите про ПРИНЦИПЫ ООП, из чего они состоят,опишите каждый",
        "answer": "Наследование Инкапсуляция Полиморфизм",
        "audio": "/oop/oop.wav"
      },
      {
        "question": "Расскажите про ПРИНЦИП ООП НАСЛЕДОВАНИЕ ",
        "answer": "концепция, согласно которой абстрактный тип данных может наследовать данные и функциональность реализуется через extends ",
        "audio": "/oop/oop_nas.wav"
      },
      {
        "question": "Расскажите про ПРИНЦИП ООП АБСТРАКЦИЯ",
        "answer": "означает выделение главных, наиболее значимых характеристик и скрытие не особо значимых \n",
        "audio": "/oop/oop_ab.wav"
      },
      {
        "question": "Расскажите про ПРИНЦИП ООП ИНКАПСУЛЯЦИЯ ",
        "answer": "размещение в одном компоненте данных и методов, которые с ними работают, так что доступ к этим данным ограничен извне\n",
        "audio": "/oop/oop_in.wav"
      },
      {
        "question": "Расскажите про ПРИНЦИП ООП ПОЛИМОРФИЗМ ",
        "answer": "способность функции обрабатывать данные разных типов",
        "audio": "/oop/oop_pol.wav"
      },
      {
        "question": "Что вы знаете о SOLID? Расшифруйте каждую букву ",
        "answer": "это аббревиатура пяти основных принципов проектирования в объектно‑ориентированном программировании — Single responsibility, Open-closed, Liskov substitution, Interface segregation и Dependency inversion.\n",
        "audio": "/oop/solid.wav"
      },
      {
        "question": "Расскажите о SOLID S) SINGLE RESPONSIBILITY\n",
        "answer": "принцип единственной ответственности\n",
        "audio": "/oop/solid_s.wav"
      },
      {
        "question": "Расскажите о SOLID O) OPEN-CLOSED\n",
        "answer": "принцип открытости / закрытости\n",
        "audio": "/oop/solid_o.wav"
      },
      {
        "question": "Расскажите о SOLID L) LISKOV SUBSTITUTION\n",
        "answer": "принцип подстановки Барбары Лисков\n",
        "audio": "/oop/solid_l.wav"
      },
      {
        "question": "Расскажите о SOLID I) INTERFACE SEGREGATION\n",
        "answer": "принцип разделения интерфейса\n",
        "audio": "/oop/solid_i.wav"
      },
      {
        "question": "Расскажите о SOLID D) DEPENDENCY INVERSION\n",
        "answer": "важный принцип объектно-ориентированного программирования, используемый для уменьшения связанности в компьютерных программах Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.",
        "audio": "/oop/solid_d.wav"
      },
      {
        "question": "расскажите о DEPENDENCY INJECTION\n",
        "answer": "Концепция Dependency Injection состоит в том, чтобы перенести ответственность за создание экземпляра объекта из тела метода за пределы класса и передать уже созданный экземпляр объекта обратно.\n",
        "audio": "/oop/di.wav"
      }
    ]
  },
  {
    "tag": "vue3",
    "name": "Vue 3",
    "list": [
      {
        "question": "Какие жизненные хуки вы знаете? - Назовите в правильной последовательности",
        "answer": "onMounted onUpdated onUnmounted onActivated onDeactivated\n",
        "audio": "/vue3/lifecycle_hooks.wav"
      },
      {
        "question": "опишите ЖИЗНЕННЫЙ ЦИКЛ компонента",
        "answer": "INIT(events&lifecycle) BeforeCreate -> INIT(injections&reactivite) Created -> beforeMount CREATED APP mounted -> MOUNTED beforeUnmount -> UNMOUNT -> unmounted\n",
        "audio": "/vue3/lifecycle_component.wav"
      },
      {
        "question": "как утстроена РЕАКТИВНОСТЬ VUE",
        "answer": "переменные объявленные в коде просто отображаются в шаблоне. При этом при изменение значения переменных в коде они автоматически будут обновляется в шаблоне. Такой механизм и называется реактивность Vue.js\n",
        "audio": "/vue3/vue_react.wav"
      },
      {
        "question": "что такое ВЫЧИСЛЯЕМЫЕ СВОЙСТВА",
        "answer": "они представляют из себя функций определяемые в поле COMPUTED которые возвращают результат каких то вычислений x-test: function () { return a+b} но отличие от обычных функций в том что они кешируются и изменяются когда меняется переменная\n в свойстве\n",
        "audio": "/vue3/comp.wav"
      },
      {
        "question": "что такое ОТСЛЕЖИВАЕМЫЕ СВОЙСТВА\n",
        "answer": "объявляются в WATCH и явсляются функциями которые именуются так же как переменная за которой надо следить\n",
        "audio": "/vue3/otsl.wav"
      },
      {
        "question": "назовите ДИРЕКТИВЫ",
        "answer": "v-if,v-else,v-else-if,v-show,v-for,v-model,v-on,v-bind,v-text,v-slot,v-pre\n",
        "audio": "/vue3/dir.wav"
      },
      {
        "question": "В чём разница между V-IF и V-SHOW ",
        "answer": "в том что SHOW скрывает но не удаляет а IF удаляет из DOM\n",
        "audio": "/vue3/vif_wshow.wav"
      },
      {
        "question": "Для чего нужен V-KEY в циклах, и что будет если его не добавить?",
        "answer": "Добавление уникального ключа компоненту что бы при перерисовке дома он не вызывал свой методы и свойства если в нём дом не менялся\n",
        "audio": "/vue3/v-key.wav"
      },
      {
        "question": "как можно передать данные от родительского компонента к дочернему",
        "answer": "props,store provide позволяет игнорировать вложенность, vueX pinia плагин позволяющий так же передавать и подписыватся на изменения \n",
        "audio": "/vue3/prop.wav"
      },
      {
        "question": "как передать данные от дочернего компонента к родителю",
        "answer": "$emit, vueX pinia",
        "audio": "/vue3/prop2.wav"
      },
      {
        "question": "Для чего нужен $EMIT\n",
        "answer": "событие позволяющее передать данные из дочернего компонента в родительский с помощью подписки в родительском\n",
        "audio": "/vue3/emit.wav"
      },
      {
        "question": "Функция computed() что она делает?",
        "answer": "вычисляемые свойства, ещё они кешируются будут производить вычисления только при изменений данных которые влият на результат\n",
        "audio": "/vue3/computed.wav"
      },
      {
        "question": "Функция WATCH() что она делает?",
        "answer": "для отслеживания переменной, и при изменении этой переменной он позволяет нам запускать функцию, чтобы мы могли выполнять динамическое взаимодействие.\n",
        "audio": "/vue3/watch.wav"
      },
      {
        "question": "что такое ИНТЕРПОЛЯЦИЯ\n",
        "answer": "привязка к шаблону для вывода данных в него через {{x-test}}\n",
        "audio": "/vue3/inter.wav"
      },
      {
        "question": "что такое МИКСИНЫ\n",
        "answer": "переиспользуемый js код который может содержать теже методы что и компонет, подключаем через mixins:[x-test] в export default\n",
        "audio": "/vue3/mix.wav"
      },
      {
        "question": "как устанавливается СЛУШАТЕЛЬ СОБЫТИЯ и какие они бывают",
        "answer": "v-on:click=\"x-test\" или сокращённый вариант @click=\"x-test\"\n",
        "audio": "/vue3/sob.wav"
      },
      {
        "question": "какие МОДИФИКАТОРЫ СОБЫТИЙ существуют",
        "answer": "@click.stop = stopPropagation, @click.prevent = preventdefault, .right , .alt , .capture итд \n",
        "audio": "/vue3/mod_sob.wav"
      },
      {
        "question": "МОДИФИКАТОРЫ У V-MODEL\n",
        "answer": "v-model.number преобразовывает значение к числу, lazy меняет поведение на on-change, trim удаляет пробелы\n",
        "audio": "/vue3/mod_if_model.wav"
      },
      {
        "question": "ГЛОБАЛЬНАЯ РЕГИСТРАЦИЯ\n",
        "answer": "компоненты регестрируются через app.component('x-test',Component) в main.js\n",
        "audio": "/vue3/global_reg.wav"
      },
      {
        "question": "Шаблонные ссылки, для чего они нужны?",
        "answer": "даёт доступ к DOM элементам <input ref=\"x-test\"> methods:{getRef(){console.log(this.$refs.x-test)}}\n",
        "audio": "/vue3/refs.wav"
      },
      {
        "question": "в чём разница между Ref и reactive",
        "answer": "Ref используется для создания реактивных ссылок на значения. Reactive преобразует объекты в реактивный объект. Он делает все свойства объекта реактивными. Или иначе ref возвращает простой объект а reactive сложный так же в reactive можно передать только объект",
        "audio": "/vue3/ref_reactiv.wav"
      },
      {
        "question": "Для чего применяется shallowRef",
        "answer": "Он делает только поверхностную реактивность",
        "audio": "/vue3/shallow-Ref.wav"
      }
    ]
  },
  {
    "tag": "vue3New",
    "name": "Vue 3 Новые вопросы",
    "list": [
      {
        "question": "Что такое компоненты в Vue?",
        "answer": "являются основными строительными блоками пользовательского интерфейса каждого приложения. Компоненты позволяют нам разделить пользовательский интерфейс на более мелкие, независимые и многократно используемые части.",
        "audio": "/vue3New/comp.wav"
      },{
        "question": "Что такое реквизиты в Vue?",
        "answer": "Реквизиты (или свойства) — это настраиваемые атрибуты, которые вы можете зарегистрировать в компоненте. Они используются для передачи данных от родительского компонента к его дочерним компонентам. Когда значение передается как атрибут prop, оно становится свойством экземпляра компонента, и к нему можно получить доступ с помощью ключевого this слова.",
        "audio": "/vue3New/rek.wav"
      },{
        "question": "Опишите, как данные передаются между компонентами в Vue",
        "answer": "Данные передаются от родительского компонента к его дочернему с помощью реквизита или пользовательского атрибута. Затем он становится свойством экземпляра дочернего компонента. Следующий фрагмент показывает нам, как родительский компонент передает свойство title с именем ChildComponent. С другой стороны, дочерние компоненты используют событие для обратной связи со своими родителями. Родитель может прослушивать эти события, присоединяя прослушиватель событий к любому событию, которое генерирует дочерний элемент.",
        "audio": "/vue3New/props.wav"
      },{
        "question": "Что такое слоты? ",
        "answer": "Слот — это еще один способ, с помощью которого родительский компонент может передать содержимое своим дочерним элементам. Однако вместо значений JavaScript слоты позволяют нам передавать содержимое или фрагменты шаблона другому компоненту.",
        "audio": "/vue3New/slot.wav"
      },{
        "question": "Как добавить резервный контент для слотов",
        "answer": "Резервное содержимое — это шаблон, определенный в slot тегах. Этот шаблон будет проигнорирован и заменен переданным контентом (если он есть).",
        "audio": "/vue3New/slot_reserv.wav"
      },{
        "question": "Что такое привязки атрибутов во vue",
        "answer": "Vue использует v-bind директиву или ее краткую форму : (двоеточее) , чтобы указать Vue, что свойство должно синхронизироваться со свойством компонента с тем же именем.",
        "audio": "/vue3New/attr.wav"
      },{
        "question": "Как вы создаете двусторонние привязки в Vue?",
        "answer": "Vue упрощает обработку пользовательского ввода и синхронизацию с помощью v-model директивы. Директива v-model обновляет модель при каждом изменении шаблона и обновляет шаблон при изменении модели.",
        "audio": "/vue3New/mod.wav"
      },{
        "question": "Что такое директивы в Vue?",
        "answer": "Директива в Vue похожа на директиву Angular. Директивы позволяют расширить компоненты HTML новыми атрибутами и тегами. Директивы в основном предназначены для повторного использования логики, включающей низкоуровневый доступ к DOM для простых элементов.",
        "audio": "/vue3New/dir.wav"
      },{
        "question": "Как передать несколько значений в директиву?",
        "answer": "Директива принимает любое допустимое выражение JavaScript, включая объекты. Таким образом, литерал объекта JavaScript может использоваться, когда директиве требуется несколько значений.",
        "audio": "/vue3New/dir2.wav"
      },{
        "question": "Что такое экземпляр Vue и как его создать?",
        "answer": "Экземпляр Vue — это корень нашего приложения. Он создается путем передачи ему объекта options . Как и следует из названия, этот объект имеет ряд дополнительных свойств, которые дают экземпляру возможность хранить данные и выполнять действия.",
        "audio": "/vue3New/eks.wav"
      },{
        "question": "Объясните разницу между слотами и слотами с ограниченной областью действия",
        "answer": "Слот — это заполнитель в дочернем компоненте, который заполняется содержимым, переданным от родителя . Ограничение использования обычных слотов заключается в доступе к свойствам дочернего компонента. Обычный слот компилируется в пределах родительской области и передается дочернему компоненту. Этот процесс ограничивает использование свойств дочерних компонентов из содержимого слота.\nСлот с ограниченной областью действия, с другой стороны, позволяет передавать данные дочернего компонента в родительскую область и использовать данные в содержимом слота.",
        "audio": "/vue3New/slot2.wav"
      },{
        "question": "Какие существуют способы добавления анимации в приложение Vue",
        "answer": "Transition и TransitionGroup – компоненты Vue для обработки переходов входа/выхода и списка.\nАнимации на основе классов — анимации, которые запускаются добавлением классов CSS.\nАнимации, управляемые состоянием — эффекты перехода, применяемые путем интерполяции значений, таких как привязка стиля компонента.\nНаблюдатели — наблюдатели могут использоваться для анимации элемента на основе числового состояния.",
        "audio": "/vue3New/anim.wav"
      },
      {
        "question": "Как передать данные между компонентами если сильная вложенность?",
        "answer": "Если от родителя к дочернему минуя несколько компонентов, то можно через provide inject, А если между 2 дочерними то либо через глобальное хронилище либо через родительский если он общий у них",
        "audio": "/vue3New/props2.wav"
      },
      {
        "question": "Для чего нужен nexttick",
        "answer": "Он нужен для того что бы гарантировать что мы работаем с полностью отрендеренным домом который соответствует последнему состоянию state, так как иногда может быть такая проблема что глубинные значения объектов могут не попасть в дом",
        "audio": "/vue3New/props2.wav"
      },
      {
        "question": "Какие хуки у роутов вы знаете?",
        "answer": "Например middleware он позволяет нам сделать добавить проверку на определённом роуте на то может пользователь перейти или нет",
        "audio": "/vue3New/middleware.wav"
      },
      {
        "question": "Можем ли мы в своём компоненте использовать v-model",
        "answer": "да если к примеру в композитион апи кажем definemodel в компоненте, либо через props или emit",
        "audio": ""
      }
    ]
  },
  {
    "tag": "videoList",
    "name": "Список роликов на просмотр",
    "show": "notShow",
    "list": [
      {
        "question": "Ролики",
        "answer": "https://yandex.ru/video/preview/3867868155126460168",
        "audio": ""
      },
      {
        "question": "подготовка ответы на вопросы",
        "answer": "https://rutube.ru/video/f9c9771665ca862de2aac5ede284751a/",
        "audio": ""
      },
      {
        "question": "подготовка ответы на вопросы",
        "answer": "https://www.youtube.com/watch?v=kYnSZTKL_tY",
        "audio": ""
      }
    ]
  }
]
